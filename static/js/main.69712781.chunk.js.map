{"version":3,"sources":["redux/actions/post.actions.ts","components/card/Card.tsx","views/home/homeBody/HomeBody.tsx","components/pagination/Pagination.tsx","hooks/hooks.ts","services/posts.service.ts","views/home/Home.tsx","components/comment/Comment.tsx","assets/avatar.svg","views/postSection/comments/Comments.tsx","services/comments.service.ts","views/postSection/PostSection.tsx","assets/github.svg","views/home/homeHeader/HomeHeader.tsx","App.tsx","reportWebVitals.ts","redux/reducers/post.reducer.ts","redux/reducers/combineReducers.ts","redux/store.ts","index.tsx"],"names":["ActionType","Card","className","onClick","this","props","title","text","PureComponent","HomeBody","posts","history","useHistory","map","p","body","cardId","id","push","Pagination","paginationData","onPageChanged","currentPage","totalPages","value","onChange","event","parseInt","target","useTypedSelector","useSelector","getPosts","page","limit","a","axios","get","response","getAllPosts","dispatch","type","GET_POSTS","data","headers","Math","ceil","GET_POSTS_SUCCESS","payload","GET_POSTS_FAILED","error","setCurrentPage","SET_CURRENT_PAGE","Home","useDispatch","state","postReducer","postList","useState","isLoading","setIsLoading","useEffect","fetchPosts","Comment","comment","avatarSrc","name","email","src","alt","Comments","c","i","avatar","getComments","postId","postComment","userName","userEmail","post","PostSection","useParams","comments","setComments","commentInput","setCommentInput","find","result","commentsData","console","log","fetchComments","onSubmitClicked","commentData","length","placeholder","ev","disabled","HomeHeader","onLogoClicked","href","logo","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","selectedPostId","undefined","action","RESET_STATE","SET_SELECTED_POST","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69712781.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { getPosts } from \"../../services/posts.service\";\r\nimport { PostType } from \"../../types/post.type\";\r\nimport { PaginationType } from \"../../types/pagination.type\";\r\n\r\nexport enum ActionType {\r\n\tRESET_STATE = \"RESET_STATE\",\r\n\tGET_POSTS = \"GET_POSTS\",\r\n\tGET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\",\r\n\tGET_POSTS_FAILED = \"GET_POSTS_FAILED\",\r\n\tSET_SELECTED_POST = \"SET_SELECTED_POST\",\r\n\tSET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n}\r\n\r\ninterface resetStateAction {\r\n\ttype: ActionType.RESET_STATE;\r\n}\r\ninterface getPostsAction {\r\n\ttype: ActionType.GET_POSTS;\r\n}\r\ninterface getPostsSuccessAction {\r\n\ttype: ActionType.GET_POSTS_SUCCESS;\r\n\tpayload: {\r\n\t\tposts: PostType[];\r\n\t\tpaginationData: PaginationType;\r\n\t};\r\n}\r\ninterface getPostsFailedAction {\r\n\ttype: ActionType.GET_POSTS_FAILED;\r\n\tpayload: {\r\n\t\terror: unknown;\r\n\t};\r\n}\r\ninterface setSelectedPostAction {\r\n\ttype: ActionType.SET_SELECTED_POST;\r\n\tpayload: number | undefined;\r\n}\r\n\r\ninterface setCurrentPageAction {\r\n\ttype: ActionType.SET_CURRENT_PAGE;\r\n\tpayload: number;\r\n}\r\n\r\nexport const resetState = () => {\r\n\treturn (dispatch: Dispatch<resetStateAction>) => {\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.RESET_STATE,\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport const getAllPosts = (currentPage: number, limit: number) => {\r\n\treturn async (dispatch: Dispatch<Action>) => {\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.GET_POSTS,\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconst { data, headers } = await getPosts(currentPage, limit);\r\n\t\t\tconst totalPages = Math.ceil(headers[\"x-total-count\"] / limit);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ActionType.GET_POSTS_SUCCESS,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tposts: data,\r\n\t\t\t\t\tpaginationData: {\r\n\t\t\t\t\t\tcurrentPage: currentPage,\r\n\t\t\t\t\t\ttotalPages,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ActionType.GET_POSTS_FAILED,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\terror,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const setSelectedPost = (postId: number) => {\r\n\treturn (dispatch: Dispatch<setSelectedPostAction>) => {\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.SET_SELECTED_POST,\r\n\t\t\tpayload: postId,\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport const setCurrentPage = (page: number) => {\r\n\treturn (dispatch: Dispatch<setCurrentPageAction>) => {\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.SET_CURRENT_PAGE,\r\n\t\t\tpayload: page,\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport type Action =\r\n\t| resetStateAction\r\n\t| getPostsAction\r\n\t| getPostsSuccessAction\r\n\t| getPostsFailedAction\r\n\t| setSelectedPostAction\r\n\t| setCurrentPageAction;\r\n","import { PureComponent } from \"react\";\r\nimport \"./Card.scss\";\r\ntype CardProps = {\r\n\ttitle: string;\r\n\ttext: string;\r\n\tonClick?: () => void;\r\n};\r\n\r\nclass Card extends PureComponent<CardProps> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"card\" onClick={this.props.onClick}>\r\n\t\t\t\t<div className=\"card-title\">\r\n\t\t\t\t\t<h2>{this.props.title}</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>{this.props.text}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Card;\r\n","import Card from \"../../../components/card/Card\";\r\nimport { PostType } from \"../../../types/post.type\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./HomeBody.scss\";\r\n\r\ntype HomeBodyProps = {\r\n\tposts: PostType[];\r\n};\r\nconst HomeBody = (props: HomeBodyProps) => {\r\n\tconst { posts } = props;\r\n\tlet history = useHistory();\r\n\tconst onCardClicked = (cardId: number) => {\r\n\t\thistory.push(`/post/${cardId}`);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"HomeBody\">\r\n\t\t\t{posts &&\r\n\t\t\t\tposts.map((p) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={`card-${p.id}`}\r\n\t\t\t\t\t\t\ttitle={p.title}\r\n\t\t\t\t\t\t\ttext={p.body}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tonCardClicked(p.id);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default HomeBody;\r\n","import { ChangeEvent } from \"react\";\r\nimport { PaginationType } from \"../../types/pagination.type\";\r\nimport \"./Pagination.scss\";\r\nexport type PaginationProps = {\r\n\tpaginationData: PaginationType;\r\n\tonPageChanged: (page: number) => void;\r\n};\r\n\r\nconst Pagination = ({ paginationData, onPageChanged }: PaginationProps) => {\r\n\tconst { currentPage, totalPages } = paginationData;\r\n\tconst onPrevClick = () => {\r\n\t\tif (currentPage > 1) {\r\n\t\t\tonPageChanged(currentPage - 1);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onNextClick = () => {\r\n\t\tif (currentPage < totalPages) {\r\n\t\t\tonPageChanged(currentPage + 1);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\tonPageChanged(parseInt(event?.target?.value));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<span className=\"pagination\">\r\n\t\t\t<button onClick={onPrevClick}> {\"<\"} </button>\r\n\t\t\t<span className=\"pagination-info\">\r\n\t\t\t\t<span>{`Page:`}</span>\r\n\t\t\t\t<input value={currentPage} onChange={onInputChange} />\r\n\t\t\t\t<span>{`of: ${totalPages}`}</span>\r\n\t\t\t</span>\r\n\t\t\t<button onClick={onNextClick}> {\">\"} </button>\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default Pagination;\r\n","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\r\nimport { RootState } from \"../redux/reducers/combineReducers\";\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import axios from \"axios\";\r\n\r\nconst getPosts = async (page: number, limit: number) => {\r\n\tconst response = await axios.get(\r\n\t\t`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${limit}`\r\n\t);\r\n\treturn response;\r\n};\r\n\r\nexport { getPosts };\r\n","import { useState, useEffect } from \"react\";\r\nimport HomeBody from \"./homeBody/HomeBody\";\r\nimport Pagination from \"../../components/pagination/Pagination\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../../hooks/hooks\";\r\nimport { getAllPosts, setCurrentPage } from \"../../redux/actions/post.actions\";\r\nimport \"./Home.scss\";\r\n\r\nconst Home = () => {\r\n\tconst maxPost = 9;\r\n\tconst dispatch = useDispatch();\r\n\tconst { posts: postList, paginationData } = useTypedSelector(\r\n\t\t(state) => state.postReducer\r\n\t);\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst onPageChanged = async (page: number) => {\r\n\t\tdispatch(setCurrentPage(page));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchPosts = async () => {\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tawait dispatch(getAllPosts(paginationData.currentPage, maxPost));\r\n\t\t\tsetIsLoading(false);\r\n\t\t};\r\n\t\tfetchPosts();\r\n\t}, [paginationData.currentPage]);\r\n\r\n\treturn isLoading ? (\r\n\t\t<div>Loading...</div>\r\n\t) : (\r\n\t\t<>\r\n\t\t\t<span className=\"Home-Pagination\">\r\n\t\t\t\t<Pagination\r\n\t\t\t\t\tpaginationData={paginationData}\r\n\t\t\t\t\tonPageChanged={onPageChanged}\r\n\t\t\t\t></Pagination>\r\n\t\t\t</span>\r\n\t\t\t<HomeBody posts={postList}></HomeBody>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import { PureComponent } from \"react\";\r\nimport { CommentType } from \"../../types/comment.type\";\r\nimport \"./Comment.scss\";\r\n\r\ntype CommentsProps = {\r\n\tcomment: CommentType;\r\n\tavatarSrc: string;\r\n};\r\n\r\nclass Comment extends PureComponent<CommentsProps> {\r\n\trender() {\r\n\t\tconst { comment, avatarSrc } = this.props;\r\n\t\tconst { name, email, body } = comment;\r\n\t\treturn (\r\n\t\t\t<div className=\"Comment\">\r\n\t\t\t\t<div className=\"Comment-Header\">\r\n\t\t\t\t\t<img src={avatarSrc} alt=\"avatar\" />\r\n\t\t\t\t\t<span className=\"Comment-Header-Name\">{name}</span>\r\n\t\t\t\t\t<span className=\"Comment-Header-Email\">{email}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>{body}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Comment;\r\n","export default __webpack_public_path__ + \"static/media/avatar.4a895b67.svg\";","import { CommentType } from \"../../../types/comment.type\";\r\nimport Comment from \"../../../components/comment/Comment\";\r\nimport avatar from \"../../../assets/avatar.svg\";\r\nimport \"./Comments.scss\";\r\n\r\ntype CommentsProps = {\r\n\tdata: CommentType[];\r\n};\r\n\r\nconst Comments = (props: CommentsProps) => {\r\n\treturn (\r\n\t\t<div className=\"Comments\">\r\n\t\t\t{props.data.map((c, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Comment\r\n\t\t\t\t\t\tkey={`comment-${c.id}`}\r\n\t\t\t\t\t\tavatarSrc={avatar}\r\n\t\t\t\t\t\tcomment={c}\r\n\t\t\t\t\t></Comment>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Comments;\r\n","import axios from \"axios\";\r\n\r\nconst getComments = async (postId: string) => {\r\n\tconst response = await axios.get(\r\n\t\t`https://jsonplaceholder.typicode.com/comments?postId=${postId}`\r\n\t);\r\n\treturn response;\r\n};\r\n\r\nconst postComment = async (\r\n\tpostId: string,\r\n\tuserName: string,\r\n\tuserEmail: string,\r\n\tcomment: string\r\n) => {\r\n\tconst data = {\r\n\t\tpostId,\r\n\t\tname: userName,\r\n\t\temail: userEmail,\r\n\t\tbody: comment,\r\n\t};\r\n\tconst response = await axios.post(\r\n\t\t\"https://jsonplaceholder.typicode.com/comments\",\r\n\t\tdata\r\n\t);\r\n\treturn response;\r\n};\r\n\r\nexport { getComments, postComment };\r\n","import { ChangeEvent, MouseEventHandler, useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport Comments from \"./comments/Comments\";\r\nimport { getComments, postComment } from \"../../services/comments.service\";\r\nimport { CommentType } from \"../../types/comment.type\";\r\nimport { useTypedSelector } from \"../../hooks/hooks\";\r\nimport \"./PostSection.scss\";\r\n\r\ntype PostSectionParams = {\r\n\tid: string;\r\n};\r\nconst PostSection = () => {\r\n\tconst mockedUserName = \"Anon\";\r\n\tconst mockedUserEmail = \"anon@gmail.com\";\r\n\tlet history = useHistory();\r\n\tconst { posts } = useTypedSelector((state) => state.postReducer);\r\n\tconst { id: postId } = useParams<PostSectionParams>();\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [comments, setComments] = useState<CommentType[]>([]);\r\n\tconst [commentInput, setCommentInput] = useState(\"\");\r\n\r\n\tconst post = posts.find((p) => p.id === parseInt(postId));\r\n\tconst onGoBackClicked = () => {\r\n\t\thistory.push(\"/\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchComments = async () => {\r\n\t\t\tsetIsLoading(true);\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await getComments(postId);\r\n\t\t\t\tconst commentsData: [CommentType] = result.data;\r\n\t\t\t\tsetComments(commentsData);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Could not get Comments\");\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t}\r\n\t\t};\r\n\t\tfetchComments();\r\n\t}, [postId]);\r\n\r\n\tconst onTextChanged = (ev: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n\t\tsetCommentInput(ev.target.value);\r\n\t};\r\n\r\n\tconst onSubmitClicked = async () => {\r\n\t\tif (!commentInput) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst result = await postComment(\r\n\t\t\t\tpostId,\r\n\t\t\t\tmockedUserName,\r\n\t\t\t\tmockedUserEmail,\r\n\t\t\t\tcommentInput\r\n\t\t\t);\r\n\t\t\tconst commentData: CommentType = result.data;\r\n\t\t\tsetComments([commentData, ...comments]);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Could not submit Comment\");\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"PostSection\">\r\n\t\t\t<span className=\"PostSection-Header\">\r\n\t\t\t\t<h2>{post?.title}</h2>\r\n\t\t\t\t<button onClick={onGoBackClicked}> {\"< Go back\"} </button>\r\n\t\t\t</span>\r\n\t\t\t<p>{post?.body}</p>\r\n\t\t\t<h3>Comments ({comments.length})</h3>\r\n\t\t\t<div className=\"PostSection-Comment\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tplaceholder=\"Submit a comment...\"\r\n\t\t\t\t\tvalue={commentInput}\r\n\t\t\t\t\tonChange={onTextChanged}\r\n\t\t\t\t>\r\n\t\t\t\t\t{commentInput}\r\n\t\t\t\t</textarea>\r\n\t\t\t\t<button disabled={!commentInput} onClick={onSubmitClicked}>\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t{isLoading ? (\r\n\t\t\t\t<div>Loading...</div>\r\n\t\t\t) : (\r\n\t\t\t\t<Comments data={comments}></Comments>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PostSection;\r\n","export default __webpack_public_path__ + \"static/media/github.e8c48bc7.svg\";","import logo from \"../../../assets/github.svg\";\r\nimport \"./HomeHeader.scss\";\r\n\r\ntype HomeHeaderProps = {\r\n\ttitle: string;\r\n\tonLogoClicked?: () => void;\r\n};\r\n\r\nconst HomeHeader = (props: HomeHeaderProps) => {\r\n\treturn (\r\n\t\t<span className=\"homeHeader\">\r\n\t\t\t<div className=\"homeHeader-logo\" onClick={props.onLogoClicked}>\r\n\t\t\t\t<a href=\"https://github.com/costilladante\">\r\n\t\t\t\t\t<img src={logo} alt=\"logo\"></img>\r\n\t\t\t\t</a>\r\n\t\t\t\t<h1>{props.title}</h1>\r\n\t\t\t</div>\r\n\t\t\t<span className=\"homeHeader-pagination\"></span>\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default HomeHeader;\r\n","import Home from \"./views/home/Home\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\nimport PostSection from \"./views/postSection/PostSection\";\r\nimport HomeHeader from \"./views/home/homeHeader/HomeHeader\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<div className=\"App-Header\">\r\n\t\t\t\t<HomeHeader\r\n\t\t\t\t\ttitle=\"Feed Project\"\r\n\t\t\t\t\t//onLogoClicked={onLogoClicked}\r\n\t\t\t\t></HomeHeader>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"App-Body\">\r\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t\t<Home></Home>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/post/:id\">\r\n\t\t\t\t\t\t\t<PostSection></PostSection>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Action, ActionType } from \"../actions/post.actions\";\r\nimport { PostType } from \"../../types/post.type\";\r\nimport { PaginationType } from \"../../types/pagination.type\";\r\n\r\ninterface State {\r\n\tposts: PostType[];\r\n\tselectedPostId?: number;\r\n\tpaginationData: PaginationType;\r\n\terror: unknown;\r\n}\r\n\r\nconst initialState = {\r\n\tposts: [],\r\n\tselectedPostId: undefined,\r\n\tpaginationData: {\r\n\t\tcurrentPage: 1,\r\n\t\ttotalPages: 1,\r\n\t},\r\n\terror: \"\",\r\n};\r\n\r\nconst postReducer = (state: State = initialState, action: Action): State => {\r\n\tswitch (action.type) {\r\n\t\tcase ActionType.RESET_STATE:\r\n\t\t\treturn initialState;\r\n\t\tcase ActionType.GET_POSTS:\r\n\t\t\treturn state;\r\n\t\tcase ActionType.GET_POSTS_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tposts: action.payload.posts,\r\n\t\t\t\tselectedPostId: undefined,\r\n\t\t\t\tpaginationData: action.payload.paginationData,\r\n\t\t\t\terror: \"\",\r\n\t\t\t};\r\n\t\tcase ActionType.GET_POSTS_FAILED:\r\n\t\t\treturn { ...initialState, error: action.payload.error };\r\n\t\tcase ActionType.SET_SELECTED_POST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tselectedPostId: action.payload,\r\n\t\t\t};\r\n\t\tcase ActionType.SET_CURRENT_PAGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpaginationData: {\r\n\t\t\t\t\t...state.paginationData,\r\n\t\t\t\t\tcurrentPage: action.payload,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default postReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./post.reducer\";\r\n\r\nconst reducers = combineReducers({\r\n\tpostReducer,\r\n});\r\n\r\nexport default reducers;\r\nexport type RootState = ReturnType<typeof reducers>;\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"./reducers/combineReducers\";\r\n\r\nexport const store = createStore(\r\n\treducers,\r\n\tcomposeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}